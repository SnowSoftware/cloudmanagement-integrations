{
  "id": "",
  "guid": "",
  "name": "Azure Waste Report",
  "type": "COMMAND",
  "change_description": null,
  "fulfillment_rule": "NONE",
  "add_owner_as_admin": false,
  "auto_deploy": false,
  "users": [],
  "organizations": [],
  "target_type": "MANAGEMENTSERVER",
  "info_messages": [],
  "prompt_message": null,
  "system_version": "9.0.0 (1007160153)",
  "steps": [
    {
      "name": "Run Azure Reclaimation Report",
      "type": "EMBEDDED_SCRIPT",
      "condition": "#{target.cloudAccount.type} -eq \"ms_arm\"",
      "data": {
        "credentials": null,
        "failure_action": "FAIL_STEP",
        "script_contents": " <#\nAzure Reclamation Report - Run directly against a cloud account in commander as a command workflow. \n* Requires Azure Powershell module - \"AZ\" on the commander server. \n* Requires the advanced property 'embotics.workflow.script.credentials' be set to \"True\"\n#>\n\n$subscriptionId = (Get-Item Env:AZURE_SUBSCRIPTION_ID).value\n$tenantId = (Get-Item Env:AZURE_TENANT_ID).value\n$apiKey = (Get-Item Env:AZURE_API_KEY).value\n$ApplicationId = (Get-Item Env:AZURE_APPLICATION_ID).value\n$Account =  \"#{target.cloudAccount.address}\" \n$AccountName = \"#{target.cloudAccount.name}\"\n$Module = \"AZ\" \n\n if(!($subscriptionId) -or !($tenantId) -or !($apiKey) -or !($ApplicationId)-or !($Module) -or !($AccountName)){\n        Write-error \"Please provide Azure Login information\"\n        #Exit 1\n        }\n\n#Remove white space for older versions of powershell\n$subscriptionId = $subscriptionId -replace \"\\s\", \"\"\n$tenantId = $tenantId -replace \"\\s\", \"\"\n$apiKey = $apiKey -replace \"\\s\", \"\"\n$ApplicationId = $ApplicationId -replace \"\\s\", \"\"\n\n#Check for Module\nif (Get-Module -ListAvailable -Name \"$Module.*\") {\n    Import-Module $Module\n    Write-Debug \"Module $Module is installed.\"\n    } \n    else {\n        Write-Error \"Module $module does not appear to be installed, Please install and run again.\"\n        Exit 1\n    }\n\n#Credential Object\n[pscredential]$Credential= New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"$ApplicationId\",(\"$apiKey\" | ConvertTo-SecureString -AsPlainText -Force) \n\n#Connect to Azure\n$Connect = Connect-AzAccount -Credential $Credential -Subscription $subscriptionId -Tenant $tenantId -ServicePrincipal -Confirm:$false\nif($Connect){\n    Write-Debug \"Connected to $($Connect[0].Context.Environment.name)\"\n}\n\n#Report Details\n$SanitzedAccount = \"XXXXXX\"+$subscriptionId.Substring(28)\n$Path = \"C:\\progra~1\\Embotics\\VCommander\\tomcat\\reports\\data\\\"\n$FileName = ($AccountName -replace \" \",\"_\")+\"-\"+$SanitzedAccount+\".html\"\n$reportpath = $path+$FileName\n$CreationDate = get-date -Format f \n\n#Get Resource Group names\n$ResourceGroups = (Get-AzResourceGroup).ResourceGroupName | Sort-Object\n\n#Setup Objects to populate\n    $MDiskobj = @()\n    $blbStorageobj = @()\n    $vNicobj = @()\n    $NicCount = 0\n\nForEach($RG in $ResourceGroups){\nWrite-Debug $RG   \n#Get Unattached Managed Disks\n$managedDisks = Get-AzDisk -ResourceGroupName $RG\nforeach ($md in $managedDisks) {\n    # ManagedBy property stores the Id of the VM to which Managed Disk is attached to\n    # If ManagedBy property is $null then it means that the Managed Disk is not attached to a VM\n    if($md.ManagedBy -eq $null){\n           $MDname = $MDtier = $MDsize = $MDUnid = $null\n           $MDname = $md.Name\n           $MDtier = ($md.Sku).name\n           $MDsize = $md.DiskSizeGB\n           $MDUnid = ($md.Id).split('/')[-1]\n           #Cost Calculation\n                $pgb = $null\n            if($MDtier -eq \"Premium_LRS\"){\n                Switch ($MDsize)\n                {\n                {0..4 -contains $_} {$pgb=2.31}\n                {5..8 -contains $_} {$pgb=2.31}\n                {9..16 -contains $_} {$pgb=2.31}\n                {17..32 -contains $_} {$pgb=2.31}\n                {33..64 -contains $_} {$pgb=2.23}\n                {65..128 -contains $_} {$pgb=2.15}\n                {129..256 -contains $_} {$pgb=2.07}\n                {257..512 -contains $_} {$pgb=2.00}\n                {513..1000 -contains $_} {$pgb=1.89}\n                {1001..2000 -contains $_} {$pgb=1.81}\n                {2001..4000 -contains $_} {$pgb=1.73}\n                {4001..8000 -contains $_} {$pgb=1.65}\n                {8001..16000 -contains $_} {$pgb=1.57}\n                {16001..32000 -contains $_} {$pgb=1.57}\n                {32001..100000 -contains $_} {$pgb=1.57}\n                }\n                }\n            Elseif($MDtier -eq \"StandardSSD_LRS\"){\n                Switch ($MDsize)\n                {\n                {0..4 -contains $_} {$pgb=1.17}\n                {5..8 -contains $_} {$pgb=1.16}\n                {9..16 -contains $_} {$pgb=1.16}\n                {17..32 -contains $_} {$pgb=1.16}\n                {33..64 -contains $_} {$pgb=1.15}\n                {65..128 -contains $_} {$pgb=1.15}\n                {129..256 -contains $_} {$pgb=1.15}\n                {257..512 -contains $_} {$pgb=1.15}\n                {513..1000 -contains $_} {$pgb=1.18}\n                {1001..2000 -contains $_} {$pgb=1.18}\n                {2001..4000 -contains $_} {$pgb=1.18}\n                {4001..8000 -contains $_} {$pgb=1.18}\n                {8001..16000 -contains $_} {$pgb=1.18}\n                {16001..32000 -contains $_} {$pgb=1.18}\n                {32001..100000 -contains $_} {$pgb=1.18}\n                }\n                }\n            Elseif($MDtier -eq \"Standard_LRS\"){\n                Switch ($MDsize)\n                {\n                {0..32 -contains $_} {$pgb=0.74}\n                {33..64 -contains $_} {$pgb=0.72}\n                {65..128 -contains $_} {$pgb=0.71}\n                {129..256 -contains $_} {$pgb=0.68}\n                {257..512 -contains $_} {$pgb=0.65}\n                {513..1000 -contains $_} {$pgb=0.63}\n                {1001..2000 -contains $_} {$pgb=0.60}\n                {2001..4000 -contains $_} {$pgb=0.55}\n                {4001..8000 -contains $_} {$pgb=0.50}\n                {8001..16000 -contains $_} {$pgb=0.47}\n                {16001..32000 -contains $_} {$pgb=0.46}\n                {32001..100000 -contains $_} {$pgb=0.46}\n                }\n                }\n            Else{\n                Write-error \"Managed Disk type $mdtier not found.\"\n                Exit 1\n                }       \n              \n                if($pgb){\n                    $MDYcost = ($MDsize*$pgb)\n                    }\n           $diskItemDetails = [PSCustomObject]@{    \n                Type = \"Managed Disk\"\n                ResourceGroup = $RG\n                UNIdentifier = $MDUnid\n                SizeGB = $MDsize\n                Ycost = $MDYcost\n            }\n            $MDiskobj += $diskItemDetails\n    }\n } \n\n#Get Unattached Blob VHDs\n$storageAccounts = Get-AzStorageAccount -ResourceGroupName $rg\nforeach($storageAccount in $storageAccounts){\n    $storageKey = $context = $containers = $null\n    Try{\n        $Storagedata = Get-AzStorageAccountKey -ResourceGroupName $storageAccount.ResourceGroupName -Name $storageAccount.StorageAccountName -ErrorAction SilentlyContinue\n        $storageKey = $Storagedata[0].Value | out-null\n        }\n        Catch{Write-debug \"Failed to get storage account key for storage account Skipping\"\n        }\n    if($Storagekey -ne $null){\n        $context = New-AzStorageContext -StorageAccountName $storageAccount.StorageAccountName -StorageAccountKey $storageKey | out-null\n        $containers = Get-AzStorageContainer -Context $context | out-null \n        }\n        \n    if($Containers){\n    foreach($container in $containers){\n        $blobs = $Vhdblb = $null\n        $blobs = Get-AzStorageBlob -Container $container.Name -Context $context\n        #Fetch all the Page blobs with extension .vhd as only Page blobs can be attached as disk to Azure VMs\n        $Vhdblb = $blobs | Where-Object {$_.BlobType -eq 'PageBlob' -and $_.Name.EndsWith('.vhd') -and $_.ICloudBlob.Properties.LeaseStatus -eq 'Unlocked'} \n            ForEach($Blob in $Vhdblb){\n            #If a Page blob is not attached as disk then LeaseStatus will be unlocked\n                $BLBID = $pgb = $BYcost = $BlBSize = $BLBType = $Data = $Null\n                $BlbCtr = $container.Name\n                [String]$BLURI = $Blob.ICloudBlob.Uri.AbsoluteUri\n                $BLBType = $Blob.BlobType\n                $BLBTier = $Blob.ICloudBlob.Properties.PremiumPageBlobTier\n                $BlBSizebyte = $Blob.ICloudBlob.Properties.Length\n                [int]$Blbsize = [math]::round($BlBSizebyte /1Gb, 2)\n                $BLBID = $BLURI.split(':')[-1] -replace \".blob.core.windows.net\",\"\" -replace \"//\",\"/\"\n                #Azure storage Calculations by teir\n                $pgb = $null\n                if($BLBTier){\n                    Switch ($BLBTier)\n                    {\n                    P4 {$pgb= 1.80}\n                    P6 {$pgb= 1.74}\n                    P15 {$pgb= 1.62}\n                    P10 {$pgb= 1.68}\n                    P20 {$pgb= 1.56}\n                    P30 {$pgb= 1.47}\n                    P40 {$pgb= 1.41}\n                    P50 {$pgb= 1.35}\n                    P60 {$pgb= 1.29}\n                    P70 {$pgb= 1.23}\n                    E10 {$pgb= 0.90}\n                    E30 {$pgb= 0.92}\n                    E70 {$pgb= 0.92}\n                    S10 {$pgb= 0.55}\n                    S30 {$pgb= 0.49}\n                    S70 {$pgb= 0.39}\n                    }\n                    }\n                Else{\n                    if(!$BLBTier){\n                        Write-host \"Blob ID = $BLBID, with a type of $BLBType\" -ForegroundColor Green\n                        Write-host \"Blob Tier not found Using Standard Tier pricing\" -ForegroundColor Green\n                        $pgb = 0.06\n                        }\n                    \n                    #Exit 1\n                    }                    \n                    if($pgb){\n                        $BYcost = ($Blbsize*$pgb)\n                        }\n                    $bdiskItemDetails = [PSCustomObject]@{    \n                        Type = \"Blob Storage\"\n                        ResourceGroup = $RG\n                        UNIdentifier = $BLBID\n                        SizeGB = $Blbsize\n                        Ycost = $BYcost\n                        }\n                    $blbStorageobj += $bdiskItemDetails\n                }\n            }\n        }\n    }\n\n#Get Unattached Nics\n$nics = Get-AzNetworkInterface -ResourceGroupName $rg -WarningAction SilentlyContinue\n\nforeach ($vnic in $nics){\n    $vNicData = Get-AzNetworkInterface -Name $vnic.name -ResourceGroupName $vnic.resourcegroupname -WarningAction SilentlyContinue\n    $VMname = $LoadBalancerpool = $null\n    $VMname = $vNicData.VirtualMachine\n    $LoadBalancerpool = $vNicData.IpConfigurations.LoadBalancerBackendAddressPools\n    Write-Debug \"VMname - $vmname ,Loadbalancer - $LoadBalancerpool\"\n\n  if(($VMname -eq $null) -and ( $LoadBalancerpool -eq $null)){\n        $vNicName = $vNicrg = $PrAddress = $null\n        $vNicName = $vNicData.name\n        $vNicrg = $vNicData.ResourceGroupName\n        $PrAddress = $vNicData.IpConfigurations.PrivateIpAddress\n        $NicCount += 1\n        if($NicCount -lt \"50\"){\n            $NicCost = \"0\"\n            }\n        if($NicCount -ge \"50\"){\n            $NicCost = \"7.50\"\n            }\n        Write-Debug \"$vNicName - $vNicrg - $PrAddress - $NicCost\"\n        $vnicItemDetails = [PSCustomObject]@{    \n                Type = \"vNic\"\n                ResourceGroup = $vNicrg\n                UNIdentifier = $vNicName\n                SizeGB = \"-\"\n                Ycost = $NicCost\n            }\n            $vNicobj += $vnicItemDetails\n    }\n  }    \n} #EndForeach RG\n\nDisconnect-AzAccount | Out-Null\n\n#Create Summary Objects\n    $SumObj = @()\n    $MDiskCost = 0\n    $BLBStoreCost = 0\n    $vNicCost = 0\n    $TotalCount = 0\n    $TotalCost = 0\n    #Managed Disk\n    if($MDiskobj -ne $null)\n        {\n        $MDiskCount = $MDiskobj.count\n        $MDiskobj | Foreach-Object{\n        $MDiskCost += $_.ycost\n        } \n            \n        $SummaryItemDetails = [PSCustomObject]@{    \n                    Type = \"Managed Disks not attached to a VM\"\n                    Count = $MDiskCount\n                    ycost = \"{0:n2}\" -f $MDiskCost\n                    }\n                $SumObj += $SummaryItemDetails\n    }\n    #Vhd blob storage\n    if($blbStorageobj -ne $null)\n        {\n        $BlobsCount = $blbStorageobj.count\n        $blbStorageobj | Foreach-Object{\n        $BLBStoreCost += $_.ycost\n        } \n            \n        $SummaryItemDetails = [PSCustomObject]@{    \n                    Type = \"Unattached EBS Volumes\"\n                    Count = $Volcount\n                    ycost = \"{0:n2}\" -f $BLBStoreCost\n                    }\n                $SumObj += $SummaryItemDetails\n    } \n    #Unassigned vNics\n    if($vNicobj -ne $null)\n        {\n        $vNiccount = $vNicobj.count\n        $vNicobj | Foreach-Object{\n        $vNicCost += $_.ycost\n        } \n            \n        $SummaryItemDetails = [PSCustomObject]@{    \n                    Type = \"Unassigned vNics\"\n                    Count = $vNiccount\n                    ycost = \"{0:n2}\" -f $vNicCost\n                    }\n                $SumObj += $SummaryItemDetails\n    }             \n    $TotalCost = \"{0:n2}\" -f ($vNicCost+$BLBStoreCost+$MDiskCost)\n    $TotalCount = $vNiccount+$BlobsCount+$MDiskCount\n        $SummaryItemDetails = [PSCustomObject]@{    \n                    Type = \"Totals\"\n                    Count = $TotalCount\n                    ycost = $TotalCost\n                    }\n                $SumObj += $SummaryItemDetails      \n\n#Create Table\n    $TableArrray = @($MDiskobj+$blbStorageobj+$vNicobj)\n\n#Create Base File\n    New-Item -Path $ReportPath -Force -Confirm:$false | Out-Null \n\n#Inject header to base file\nAdd-Content -Path $reportpath -Value ('\n<html xmlns:xi=\"http://www.w3.org/2001/XInclude\" xmlns:b=\"http://www.backbase.com/2006/btl\" xmlns:e=\"http://www.backbase.com/2006/xel\" xmlns:d=\"http://www.backbase.com/2006/tdl\" xmlns:c=\"http://www.backbase.com/2006/command\" xmlns:rep=\"http://www.embotics.com/vcommander/report\">\n<head xmlns:bf=\"http://www.backbase.com/2007/forms\">\n<META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Report</title>\n<meta content=\"IE=Edge\" http-equiv=\"X-UA-Compatible\">\n<script SRC=\"/reportlibs/fusioncharts3/fusioncharts.js\" type=\"text/javascript\"></script><script SRC=\"/reportlibs/fusioncharts3/fusioncharts.charts.js\" type=\"text/javascript\"></script><script SRC=\"/reportlibs/fusioncharts3/themes/fusioncharts.theme.fint.js\" type=\"text/javascript\"></script><script SRC=\"/reportlibs/lightbox.js\" type=\"text/javascript\"></script><script type=\"text/javascript\">\n     function showhide(id){\n        if (document.getElementById){\n           obj = document.getElementById(id);\n           if (obj.style.display == \"none\"){\n             obj.style.display = \"\";\n           } else {\n             obj.style.display = \"none\";\n           }\n         }\n       }\n        </script><script type=\"text/javascript\">   \n      function keydown(e) {\n          if(e.ctrlKey && e.keyCode==80) { // CTRL + P\n              e.preventDefault();\n              e.stopPropagation();\n              embPrint();\n       }\n       }\n       function embPrint() {\n         window.print();\n      }\n       document.onkeydown = keydown;\n        </script><script src=\"/Backbase/bb.js\" type=\"text/javascript\"></script><script type=\"text/javascript\">\n       \n        function createEnlarge(contId, chartObj){\n          var cont = document.getElementById(contId);\n          var icon = document.createElement(''i'');\n           icon.className=\"showLightbox fa fa-search-plus color-gray\";\n              icon.style.marginTop = (cont.clientHeight - 24) + ''px'';\n              icon.onclick = function(){\n      showLightboxForElement(icon, chartObj);\n     };\n          cont.insertBefore(icon,cont.firstChild); \n        }\n        </script>\n<link href=\"/css/default.css\" type=\"text/css\" rel=\"stylesheet\">\n<link href=\"/css/skin.css\" type=\"text/css\" rel=\"stylesheet\">\n<link href=\"/css/icons.css\" type=\"text/css\" rel=\"stylesheet\">\n<link href=\"/css/fa/font-awesome.css\" type=\"text/css\" rel=\"stylesheet\">\n</head>\n<body class=\"report_html billing\">\n<style>\n</style>\n<xmp xmlns:bf=\"http://www.backbase.com/2007/forms\" class=\"printLandscape\" type=\"application/backbase+xml\" backbase=\"true\">\n<xi:include href=\"/Backbase/skin.xml\"/>\n<div name=\"report_banner_logo\"></div>\n<div name=\"report_controls\">\n<div id=\"report_logo\"></div>\n<b:button>Print\n                <e:handler type=\"text/javascript\" event=\"click\">\n                    embPrint();\n                </e:handler>\n</b:button>\n</div>\n<div name=\"report_banner_title\">\n<h1>Azure Reclamation Report</h1>\n</div>\n<div name=\"report_banner_subtitle\">\n<ul class=\"report_para\">\n<table class=\"clear_border_report_table\">\n\n') -Force -Confirm:$false\n\nAdd-Content -Path $reportpath -Value (\"\n<tr>\n<td><label>Creation Date:</label></td><td>$CreationDate</td>\n</tr>\n<tr>\n<td><label>Azure Account:</label></td><td>$SanitzedAccount</td>\n</tr>\n<tr>\n<td><label>Account Name:</label></td><td>$AccountName</td>\n</tr>\n</table>\n</ul>\n</div>\n<div>\n<p></p>\n</div>\n<br>\n</br> \n<table id=\"\"table-1\"\">\n<tr>\n<td>\n\n<div id=\"\"table1Div\"\">\n<div class=\"\"tableData\"\">\n<table class=\"\"table_data\"\">\n<tr>\n<th>Savings Summary</th><th>Count</th><th>Yearly Cost (USD)</th>\n</tr>\n\") -Force -Confirm:$false\n\n#Add Summary Table Objects\n$SumObj | ForEach-Object {\nif($_.Type){[string]$sumtp = $_.Type}\n    Else{$sumtp =\"-\"}\nif($_.count){[int]$sumcount = $_.Count}\n    Else{$sumcount = \"-\"}\nif($_.ycost){[float]$sumcost = $_.ycost}\n    Else{$sumcost = \"-\"}   \n\nAdd-Content -Path $reportpath -Value (\"\n<tr>\n<td>$sumtp</td><td>$sumcount</td><td>$sumcost</td>\n</tr>\n\") -force -Confirm:$false\n}\n\nAdd-Content -Path $reportpath -Value (\"\n</table>\n</div>\n</div>\n\n<script type=\"\"text/javascript\"\">\n</script></td>\n</tr>\n</table>\n<table width=\"\"100%\"\" id=\"\"table-2\"\">\n<tr>\n<td>\n<p>\n<b>Item Summary</b>\n</p>\n<div class=\"\"chart_details\"\">\n<table class=\"\"report_table\"\">\n<tr>\n<th>Type</th><th class=\"\"rightAligned\"\">ResourceGroup</th><th class=\"\"rightAligned\"\">Identifier</th><th class=\"\"rightAligned\"\">Storage GB</th>\n</tr>\n\") -force -Confirm:$false\n\n#Add Summary Table Objects\n$SortedArray = $TableArrray | Sort-object -Property ResourceGroup ,Type\n$Sortedarray| ForEach-Object {\n    $linetp = $LineRegn = $lineid = $lineGB = $null\n    if($_.Type){[string]$linetp = $_.Type}\n    Else{$linetp =\"-\"}\nif($_.ResourceGroup){[string]$LineRegn = $_.ResourceGroup}\n    Else{$LineRegn =\"-\"}\nif($_.UNIdentifier){[string]$lineid = $_.UNIdentifier}\n    Else{$lineid =\"-\"}\nif($_.SizeGB){$lineGB = $_.SizeGB}\n    Else{$LineGB =\"-\"}\n    Write-Debug \"Object-$Linetp $LineRegn $lineid $lineGB\"\n    \nAdd-Content -Path $reportpath -Value (\"\n<tr>  \n<td>$linetp</td><td class=\"\"rightAligned\"\">$LineRegn</td><td class=\"\"rightAligned\"\">$lineid</td><td class=\"\"rightAligned\"\">$lineGB</td>\n</tr>\n\n\") -force -Confirm:$false\n}\nAdd-Content -Path $reportpath -Value (\"\n<tr>\n<td colspan=\"\"1448\"\"><span class=\"\"recordDesc\"\"></span></td>\n</tr>\n<tr>\n<td class=\"\"blackLine\"\" colspan=\"\"3458\"\"></td>\n</tr>\n\n</table>\n</div>\n</td>\n</tr>\n\n</table>\n<div id=\"\"report_bottom\"\"></div>\n</xmp>\n</body>\n</html>\n\") -force -Confirm:$false\n\n\nWrite-Output \"AZURERPath#$FileName\" \n \n",
        "script_arguments": "",
        "timeout": 900,
        "executable": "powershell.exe",
        "capture_output": true
      }
    },
    {
      "name": "Parse Output for report URL",
      "type": "EMBEDDED_SCRIPT",
      "condition": "#{target.cloudAccount.type} -eq \"ms_arm\"",
      "data": {
        "credentials": null,
        "failure_action": "FAIL_STEP",
        "script_contents": "$ReportName = \"#{steps['Run Azure Reclaimation Report'].output}\"\n$CommanderAddress = \"#{system.address}\"\n$Report = $Reportname.Split('#')[1]\nWrite-Output \"https://$CommanderAddress/reports/$Report\" \n\n",
        "script_arguments": "",
        "timeout": 100,
        "executable": "powershell.exe",
        "capture_output": true
      }
    },
    {
      "name": "Send Email",
      "type": "EMAIL",
      "condition": "#{target.cloudAccount.type} -eq \"ms_arm\"",
      "data": {
        "address_list": "yourmail@yourcompany.com",
        "email_body": "The Report you requested is ready. \nreport address: #{steps['Parse Output for report URL'].output}\n",
        "email_subject": "Azure Reclamation Report Complete",
        "include_details": true
      }
    }
  ]
}