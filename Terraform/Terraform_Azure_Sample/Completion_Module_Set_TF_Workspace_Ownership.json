{
  "id": "",
  "guid": "",
  "name": "Set Terraform workspace ownership",
  "description": null,
  "type": "CUSTOM_COMPLETION",
  "change_description": null,
  "target_type": null,
  "input_variables": [
    {
      "name": "Bypass Unsigned Certificate",
      "variable": "bypass_Cert",
      "description": "Bypass unsigned Certificate: {yes/no}",
      "required": true,
      "default_value": "Yes"
    },
    {
      "name": "Assign Primary Owner",
      "variable": "is_primary",
      "description": "True:False",
      "required": true,
      "default_value": "false"
    },
    {
      "name": "Commander Base URL",
      "variable": "BaseURL",
      "description": "Commander base URL \"https://localhost:8443\"",
      "required": true,
      "default_value": "https://localhost"
    },
    {
      "name": "Owner",
      "variable": "owner",
      "description": "user to assign to the TF workspace",
      "required": true,
      "default_value": "#{request.requester.userId}"
    },
    {
      "name": "Terraform Workspace",
      "variable": "tf_workspace",
      "description": "name of the terraform workspace",
      "required": true,
      "default_value": "#{request.id}"
    },
    {
      "name": "Organization",
      "variable": "organization",
      "description": "Organization to assign to the workspace",
      "required": true,
      "default_value": "#{request.requester.organization.name}"
    },
    {
      "name": "Assign IT Contact",
      "variable": "assign_IT_contact",
      "description": "True:False",
      "required": true,
      "default_value": "false"
    },
    {
      "name": "Wait For Sync to Complete",
      "variable": "waitforSync",
      "description": "Timer in seconds to for Accounts for finish syncing before continuing. ",
      "required": true,
      "default_value": "60"
    }
  ],
  "info_messages": [],
  "system_version": "8.10.4 (1007150089)",
  "steps": [
    {
      "name": "Syncronize all TF accounts",
      "type": "EMBEDDED_SCRIPT",
      "condition": null,
      "data": {
        "credentials": null,
        "failure_action": "FAIL_STEP",
        "script_contents": "<#\n#>\n\n$BaseURL = \"#{inputVariable['BaseURL']}\"\n$User = (Get-Item Env:SELECTED_CREDENTIALS_USERNAME ).value; #Credential\n$Pass = (Get-Item Env:SELECTED_CREDENTIALS_PASSWORD).value;\n$BypassCert = \"#{inputVariable['bypass_Cert']}\" \n$WaitforSync = \"#{inputVariable['waitforSync']}\" #seconds\n$Owner = \"#{request.requester.userId}\"\n$Ownerprimary = \"false\"   # $true:$false\n$OwneritContact = \"false\"   # $true:$false\n$Organization = \"#{request.requester.organization.name}\"\n$workspace = \"#{request.id}\"\n\n #Check All Variables Presenta\nif (!($BaseURL ) -or !($WaitforSync) -or !($user) -or !($pass) -or !($BypassCert) ) {\n        Write-error \"Please provide all required input variables to execute this workflow\"\n        Exit 1} \n\n#$DebugPreference=\"Continue\"\n$ErrorActionPreference = \"Stop\"\n\n#Bypass unsigned SSL for Localhost\nif ($BypassCert -eq \"yes\") {\n    Write-host \"- Ignoring invalid Certificate\" -ForegroundColor Green\n    add-type @\"\n   using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::Expect100Continue = $true\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n}\n\n#Get a token   \n    Write-host \"Requesting a new token\"\n    $TokenBody = \"{\n        \"\"username\"\": \"\"$user\"\",\n        \"\"password\"\": \"\"$pass\"\"\n        }\"\n                        \n    $Tokenendpoint = \"/rest/v3/tokens\"\n    $TokenpostURL = $BaseURL + $Tokenendpoint\n    $Tokenresult = Invoke-RestMethod $TokenpostURL -Method POST -Body $TokenBody -ContentType 'application/json' \n        IF ($Tokenresult) {\n            $authToken = $Tokenresult.token\n            $headers = @{Authorization = (\"Bearer $authToken\") }\n            Write-host \"Token Acquired\"\n        }\n        else {\n            Write-host \"Failed to aquire token for $user\"\n        }\n \n#Get TF Workspace\n    $wspEP = \"/rest/v3/terraform-workspaces?filter=name -eq $Workspace\"\n    $wspurl = $BaseURL+$wspEP  \n    $wspresult = Invoke-RestMethod $wspurl -Method GET -header $headers -ContentType 'application/json' \n    $wspcount = $wspresult.items.count\n        IF ($wspcount -eq 1) {\n            $id = $TFaName = $SyncResult = $SyncEP = $null \n            $Wspid = $wspresult.items.id\n            #Refresh JWT Token \n                $refreshURL = $BaseURL + \"/rest/v3/tokens/refresh\"\n                $refreshBody = \"{ \"\"token\"\": \"\"$authToken\"\"}\"\n                $refreshResult = Invoke-RestMethod -Method POST $refreshURL -Body $refreshBody -ContentType 'application/json' \n                $authToken = $refreshResult.token\n                $headers = @{\"Authorization\" = \"Bearer $authToken\" }\n            if($organization){\n                $SetwspOrg = $BaseURL+\"/rest/v3/terraform-workspaces/$Wspid/organization\"  \n                $OrgJson = @{ name = $($Organization)} | ConvertTo-Json\n                $wsporgresult = Invoke-WebRequest $SetwspOrg -Method PUT -header $headers -body $OrgJson -ContentType 'application/json'              \n            }\n            if($Owner){\n                $SetwspOwner = $BaseURL+\"/rest/v3/terraform-workspaces/$Wspid/owners\"  \n                $OwnerJson = @{ \n                    name = $($owner) \n                    is_primary = $($Ownerprimary)  \n                    is_it_contact = $($OwneritContact) } | ConvertTo-Json\n                $wsporgresult = Invoke-WebRequest $SetwspOwner -Method POST -header $headers -body $OwnerJson -ContentType 'application/json'              \n            }\n        }\n        elseif($wspcount -gt 1){\n            Write-Error \"More than one Workspace was returned.. Please contact your Administrator\"\n            Exit 1\n        }\n        else {\n            Write-Error \"No Workspaces were returned, Please contact your Administrator\"\n            Exit 1\n        }   \n#wait a few seconds for Syncs to complete        \nStart-sleep $WaitforSync \n\n",
        "script_arguments": "",
        "timeout": 300,
        "executable": "powershell.exe",
        "capture_output": true
      }
    }
  ]
}