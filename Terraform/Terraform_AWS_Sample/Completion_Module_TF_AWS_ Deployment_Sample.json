{
  "id": "",
  "guid": "",
  "name": "Terraform AWS Deploy Sample",
  "description": null,
  "type": "CUSTOM_COMPLETION",
  "change_description": null,
  "target_type": null,
  "input_variables": [
    {
      "name": "Instance Name",
      "variable": "InstanceName",
      "description": "Name of the Instance to be deployed",
      "required": true,
      "default_value": null
    },
    {
      "name": "Terraform Executable Path",
      "variable": "terraform_Exe_path",
      "description": "Path of the Terraform executable on the commander server",
      "required": true,
      "default_value": "c:\\terraform\\terraform.exe"
    },
    {
      "name": "Folder for new Deployments",
      "variable": "deploymentfilelocation",
      "description": "Location for new Folders containing new deployment files. ",
      "required": true,
      "default_value": "c:\\terraform\\deployments"
    },
    {
      "name": "AWS Region",
      "variable": "region",
      "description": "AWS Deployment Region",
      "required": true,
      "default_value": "ca-central-1"
    },
    {
      "name": "Terraform Organization",
      "variable": "terraform_organization",
      "description": "Terraform Cloud Organization name",
      "required": true,
      "default_value": null
    },
    {
      "name": "Base Template Folder",
      "variable": "template_folder_clone",
      "description": "The location of the Base files to be copied for this deployment. ",
      "required": true,
      "default_value": "C:\\Terraform\\Ubuntu_VM_Template"
    },
    {
      "name": "WebServer Port",
      "variable": "webport",
      "description": "Port to host the web service on 80,443 or other. ",
      "required": true,
      "default_value": "8080"
    }
  ],
  "info_messages": [],
  "system_version": "8.10.4 (1007150089)",
  "steps": [
    {
      "name": "Run TF Deployment",
      "type": "EMBEDDED_SCRIPT",
      "condition": null,
      "data": {
        "credentials": null,
        "failure_action": "FAIL_STEP",
        "script_contents": "<#\nDescription: Script that copies a TF Config from another folder, creates a new Variables.tf and then runs Init/Apply\nRequirements: \n-Snow Comamnder 9.0.0 or higher\n-Powershell or PWSH 5.1 or greater\n-Terraform binary installed on the commander server located at c:\\terraform\\terraform.exe and linked to Terraform Cloud.\n--https://learn.hashicorp.com/tutorials/terraform/cloud-login \n- you might need to copy your TerraformCloud token to C:\\Users\\CommanderService\\AppData\\Roaming\\terraform.d for Commander to be able to connect to TFCloud.\n#>\n\n$Requestid = \"#{request.id}\"\n$Template = \"#{inputVariable['template_folder_clone']}\"\n$Deployment = \"#{inputVariable['deploymentfilelocation']}\"\n$Terraformexe = \"#{inputVariable['terraform_Exe_path']}\"\n$InstanceName = \"#{inputVariable['InstanceName']}\"\n$TF_Organization = \"#{inputVariable['terraform_organization']}\"\n$Region = \"#{inputVariable['region']}\"\n$Port = \"#{inputVariable['webport']}\"\n\nif(!($Requestid) -or !($Template ) -or !($Deployment) -or !($Terraformexe) -or !($InstanceName) -or !($TF_Organization) -or !($Region) -or !($port)){ \n        Write-error \"Please provide required information\"\n        Exit 1\n        }\n        \n#$DebugPreference=\"Continue\"\n$ErrorActionPreference = \"Stop\"\n\n$DeploymentName = \"$requestid\"\n$Folderlocation = \"$Deployment\" + \"\\\" + $DeploymentName\n$outputFile = \"$Folderlocation\"+\"\\\"+\"output.log\"\nWrite-host \"Output will be saved to: $outputfile\"\n\n#Check if Deployment location exists\n    if(!$Deployment){\n        Write-host \"Folder does not exist creating....\"\n        New-Item -Path \"$Deployment\" -ItemType \"directory\"\n            if($Deployment){\n                Write-host \"Folder $Deployment created sucesfully\"\n            }\n            Else{Write-host \"Folder wasn't created as expected, please see administrator.\"\n            }\n    }\n\n#Check for Duplicate state folder\n   \n    #Check if Deployment location exists\n    if(Test-Path -Path $Folderlocation){\n        Write-Error \"Folder already exists.... Something has gone terribly wrong.\"\n        Exit 1\n    }\n\n#Copy Base File to New folder\n    Copy-Item -Path $Template -Destination $Folderlocation -Recurse -Force -Confirm:$False\n\n#overwrite the default Variables.tf\n$Values = @\"\nterraform {\n  cloud {\n    organization = \"$TF_Organization\"\n\n    workspaces {\n      name = \"$DeploymentName\"\n    }\n  }\n}\n    variable \"instance_type\"{\n      type = string\n      default = \"t2.micro\"\n    }\n    variable \"server_port\" {\n      description = \"The port the server will use for HTTP requests\"\n      type        = number\n      default     = \"$Port\"\n    }\n    variable \"aws_region\" {\n      type    = string\n      default = \"$Region\"\n    }\n    variable \"instancename\"{\n        type = string\n        default = \"$InstanceName\"\n    }\n    variable \"sgname\"{\n        type = string\n        default = \"$InstanceName-sg\"\n    }\n\"@\n    New-Item -Path $Folderlocation -Name variables.tf -ItemType \"file\" -Value $values -Force -Confirm:$false\n\n#Setup init params    \n    Write-Host \"Terraform Path: $Folderlocation\"\n    $initparams = @()\n    $initparams += \"init\"\n\n#Run the terraform process to load modules and init the system\n    try {\n        Write-Host \"Running Terraform Init process\"\n        Start-Process -FilePath $Terraformexe -WorkingDirectory $Folderlocation -ArgumentList $initparams -wait -RedirectStandardOutput $outputFile -NoNewWindow\n    }\n    catch {\n        Write-Error \"Terraform was not initialized successfully\"  \n        Exit 1 \n    }\n\n#Read the result of the initialization call\n    try {\n        Write-Host \"Loading Terraform Init results\"\n        $initResults = Get-Content $outputFile\n    }\n    catch {\n        Write-Error \"Terraform init results could not be loaded\"  \n        Exit 1\n    }\n\n#Check if the initializaion has completed\n    $search = ($initResults | Select-String -Pattern 'Terraform Cloud has been successfully initialized').Matches.Success\n    if ($search) {\n        Write-Host \"Terraform was successfully initialized\"\n    }\n    else {\n        Write-Error \"Terraform init results, do not contain: 'Terraform Cloud has been successfully initialized'\"  \n        Exit 1   \n    }\n\n#Setup Apply Commands(Apply)\n    $applyparam = @()\n    $applyparam += \"apply\"\n    $applyparam += \"-input=false\"\n    $applyparam += \"-auto-approve\"\n\n\n#Run the terraform process to load modules and init the system\n    Start-Process -FilePath $Terraformexe -WorkingDirectory $Folderlocation -ArgumentList $applyparam -wait -RedirectStandardOutput $outputFile\n\n#Read the result of the initialization call\n    $deployResults = Get-Content $outputFile\n\n#Check if the initializaion has completed\n    if ($deployResults -like '*Apply complete!*') {\n        Write-Host \"Terraform template was successfully deployed\"\n    }\n    else {\n        Write-Host \"Terraform template was not deployed successfully\"\n        Exit 1\n    }",
        "script_arguments": "",
        "timeout": 300,
        "executable": "powershell.exe",
        "capture_output": true
      }
    }
  ]
}
