{
  "id": "",
  "guid": "",
  "name": "AWS Waste Reclamation Report",
  "type": "COMMAND",
  "change_description": null,
  "fulfillment_rule": "NONE",
  "add_owner_as_admin": false,
  "auto_deploy": false,
  "users": [],
  "organizations": [],
  "target_type": "MANAGEMENTSERVER",
  "info_messages": [],
  "prompt_message": null,
  "system_version": "8.6.1 (1007110118)",
  "steps": [
    {
      "name": "Run AWS Reclaimation Report",
      "type": "EMBEDDED_SCRIPT",
      "condition": "#{target.cloudAccount.type} -eq \"amazon_aws\"",
      "data": {
        "credentials": null,
        "failure_action": "FAIL_STEP",
        "script_contents": "<#\nAWS Reclamation Report - Run directly against a cloud account in commander as a command workflow. \nRequires AWS module - \"AWSPowershell.netcore\"\n#>\n\n$AccessKey = (Get-Item Env:AWS_ACCESS_KEY_ID).value\n$SecretKey = (Get-Item Env:AWS_SECRET_ACCESS_KEY).value\n$AccountName = \"#{target.cloudAccount.name}\"\n$Account = \"#{target.remoteId}\"\n\nif(!($Accesskey) -or !($SecretKey) -or !($AccountName) -or !($Account)){\n        Write-error \"Please provide AWS Login information\"\n        Exit 1\n        } \n\n#Remove white space for older versions of powershell\n$Accesskey = $Accesskey -replace \"\\s\", \"\"\n$SecretKey = $SecretKey -replace \"\\s\", \"\"\n\n#Check for Module\n$Module = \"AWSPowerShell.NetCore\"\nif (Get-Module -ListAvailable -Name $Module) {\n    Import-Module AWSPowershell.netcore\n    Write-Debug \"Module $Module is installed.\"\n} \nelse {\n    Write-Error \"Module $module does not appear to be installed, Please install and run again.\"\n    Exit 1\n}\n\n#Login\nSet-AWSCredentials -AccessKey $AccessKey -SecretKey $SecretKey -StoreAs SnowCommander\n$Connect = Initialize-AWSDefaults -ProfileName SnowCommander\n$SanitzedAccount = \"XXXXXX\"+ $Account.Substring(6)\n\n$Path = \"C:\\progra~1\\Embotics\\VCommander\\tomcat\\reports\\data\\\"\n$FileName = ($AccountName -replace \" \",\"_\")+\"-\"+$SanitzedAccount+\".html\"\n$reportpath = $path+$FileName\n\n$CreationDate = get-date -Format f \n\n#Get-Regions\n$Regions = (Get-AWSRegion | Where-object {$_.name -notlike \"*iso*\"}).Region\n\n#Setup Objects to populate\n    $EIPobj = @()\n    $Volobj = @()\n    $Snapobj = @()\n    $SumObj = @()\n    $TableObj = @()\n\nForEach($Region in $Regions){\n#Set Default Region\nSet-DefaultAWSRegion -Region $region\nWrite-Debug \"Current Region: $Region\"\n\n#EIP Report\n    $EIP = $null\n        $EIP = get-ec2address | Where-Object {$_.AssociationId -eq $null}\n        $EIPnoAl = $Eip | Where-Object {$_.AssociationId -eq $null -and $_.AllocationId -eq $null}\n      \n        ForEach($EIPNA in $EIPnoAl){\n            $EIPaddress = $EIPNA.publicIP\n            $EIPItemDetails = [PSCustomObject]@{    \n                Type = \"Elastic IP\"\n                Region = $Region\n                UNIdentifier = $Eipaddress\n                SizeGB = $null\n                Ycost = \"43.80\"\n            }\n            $EIPobj += $EIPItemDetails\n            }    \n        $EIPwithAL = $Eip | Where-Object {$_.AssociationId -eq $null -and $_.AllocationId -ne $null}\n        $EipCount += $EIPwithAL.count\n        ForEach($EIPWA in $EIPwithAL){\n            $EIPaddress = $EIPWA.PublicIP\n            $EIPAllocID = $EIPWA.AllocationId\n            $EIPItemDetails = [PSCustomObject]@{    \n                Type = \"Elastic IP\"\n                Region = $Region\n                UNIdentifier = $Eipaddress\n                SizeGB = $null\n                Ycost = \"43.80\"\n            }\n            $EIPobj += $EIPItemDetails\n            }\n\n#EBS Volume Report\n        $EBS = Get-EC2Volume | where-object {$_.state -ne \"in-use\"}\n    ForEach($vol in $ebs){\n        $Volid = $vol.VolumeId\n        $VolSize = $Vol.Size\n        $VolType = $Vol.VolumeType\n        $VolIOP = $Vol.Iops\n        #EBS Calculations\n            $Pgb=$null\n            if($Voltype -eq \"io2\"){\n                Switch ($VolIop)\n                {\n                {1..32000 -contains $_} {$piop=0.78 }\n                {32001..64000 -contains $_} {$piop=0.55 }\n                {64001..100000 -contains $_} {$piop= 0.38}\n                }\n            }\n\n            Switch ($VolType)\n                        {\n                        gp2 {$pgb=1.20}\n                        gp3 {$pgb=0.96}\n                        io1 {$pgb=1.50}\n                        io2 {$pgb=1.50}\n                        st1 {$pgb=0.54}\n                        sc1 {$pgb=0.18}\n                        }\n\n                $ycost = $null\n            if($Voltype -eq \"io1\"){\n                $Ycost = ($VolSize*$pgb)+($VolIOP*0.78)\n                }\n            elseif($Voltype -eq \"io2\"){\n                $Ycost = ($VolSize*$pgb)+($VolIOP*$piop)\n                }\n            else{\n                $Ycost = ($VolSize*$pgb)\n                }\n       \n        $VolItemDetails = [PSCustomObject]@{    \n                Type = \"EBS Volume\"\n                Region = $Region\n                UNIdentifier = $Volid\n                SizeGB = $VolSize\n                ycost = \"{0:n2}\" -f $ycost\n            }\n            $Volobj += $VolItemDetails\n        }\n        \n\n#Snapshot Report\n        $Snaps = Get-EC2Snapshot -OwnerId $account\n    Foreach($Snap in $Snaps){\n        $Volumechk = \"\"\n        $Vol = $Null\n        $AMI = $Null\n        $SnapID = $Snap.SnapshotId\n        $VolumeID = $Snap.VolumeId\n        $sVolSize = $Snap.volumesize\n        $Volumechk = Get-EC2Volume | where-object {$_.VolumeId -eq $VolumeID}\n            #Write-host \"$SnapID - $volumechk\"\n            if(!$volumechk){$volume = $null}\n            if($Volume -eq $null)\n                {\n                $Snapcount += 1     \n                $sYcost = ($sVolSize*0.60)    \n                    $snapItemDetails = [PSCustomObject]@{    \n                    Type = \"EBS Snapshot\"\n                    Region = $Region\n                    UNIdentifier = $SnapID\n                    SizeGB = $sVolSize\n                    ycost = \"{0:n2}\" -f $sycost\n                    }\n                $snapobj += $snapItemDetails\n                }\n    }\n}\n\n#Create Summary Objects\n    $SumObj = @()\n    $EIPTotalCost = 0\n    $VolTotalCost = 0\n    $SnapTotalCost = 0\n    $TotalCount = 0\n    $TotalCost = 0\n    if($Eipobj -ne $null)\n        {\n        $EIPCount = $EIPobj.count\n        $EIPobj | Foreach-Object{\n        $EIPTotalCost += $_.ycost\n        } \n            \n        $SummaryItemDetails = [PSCustomObject]@{    \n                    Type = \"Elastic IPs Without Associations\"\n                    Count = $EIPCount\n                    ycost = \"{0:n2}\" -f $EIPtotalcost\n                    }\n                $SumObj += $SummaryItemDetails\n    }\n    if($Volobj -ne $null)\n        {\n        $VolCount = $Volobj.count\n        $Volobj | Foreach-Object{\n        $VOLTotalCost += $_.ycost\n        } \n            \n        $SummaryItemDetails = [PSCustomObject]@{    \n                    Type = \"Unattached EBS Volumes\"\n                    Count = $Volcount\n                    ycost = \"{0:n2}\" -f $VOLTotalCost\n                    }\n                $SumObj += $SummaryItemDetails\n    } \n    if($Snapobj -ne $null)\n        {\n        $SnapCount = $Snapobj.count\n        $snapobj | Foreach-Object{\n        $SnapTotalCost += $_.ycost\n        } \n            \n        $SummaryItemDetails = [PSCustomObject]@{    \n                    Type = \"Snapshots with no Originating Volume\"\n                    Count = $Snapcount\n                    ycost = \"{0:n2}\" -f $SnapTotalCost\n                    }\n                $SumObj += $SummaryItemDetails\n    }             \n    $TotalCost = \"{0:n2}\" -f ($SnapTotalCost+$EIPTotalCost+$VolTotalCost)\n    $TotalCount = $Snapcount+$EipCount+$VolCount\n        $SummaryItemDetails = [PSCustomObject]@{    \n                    Type = \"Totals\"\n                    Count = $TotalCount\n                    ycost = $TotalCost\n                    }\n                $SumObj += $SummaryItemDetails          \n          \n\n#Create Table\n    $TableArrray = @($EIPobj+$Volobj+$Snapobj)\n\n#Create Base File\nnew-item -Path $ReportPath -Force -Confirm:$false | Out-Null \n\n#Inject header to base file\nadd-Content -Path $reportpath -Value ('\n<html xmlns:xi=\"http://www.w3.org/2001/XInclude\" xmlns:b=\"http://www.backbase.com/2006/btl\" xmlns:e=\"http://www.backbase.com/2006/xel\" xmlns:d=\"http://www.backbase.com/2006/tdl\" xmlns:c=\"http://www.backbase.com/2006/command\" xmlns:rep=\"http://www.embotics.com/vcommander/report\">\n<head xmlns:bf=\"http://www.backbase.com/2007/forms\">\n<META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Report</title>\n<meta content=\"IE=Edge\" http-equiv=\"X-UA-Compatible\">\n<script SRC=\"/reportlibs/fusioncharts3/fusioncharts.js\" type=\"text/javascript\"></script><script SRC=\"/reportlibs/fusioncharts3/fusioncharts.charts.js\" type=\"text/javascript\"></script><script SRC=\"/reportlibs/fusioncharts3/themes/fusioncharts.theme.fint.js\" type=\"text/javascript\"></script><script SRC=\"/reportlibs/lightbox.js\" type=\"text/javascript\"></script><script type=\"text/javascript\">\n     function showhide(id){\n        if (document.getElementById){\n           obj = document.getElementById(id);\n           if (obj.style.display == \"none\"){\n             obj.style.display = \"\";\n           } else {\n             obj.style.display = \"none\";\n           }\n         }\n       }\n        </script><script type=\"text/javascript\">   \n      function keydown(e) {\n          if(e.ctrlKey && e.keyCode==80) { // CTRL + P\n              e.preventDefault();\n              e.stopPropagation();\n              embPrint();\n       }\n       }\n       function embPrint() {\n\t  \t\t    window.print();\n\t  \t  }\n       document.onkeydown = keydown;\n        </script><script src=\"/Backbase/bb.js\" type=\"text/javascript\"></script><script type=\"text/javascript\">\n       \n       \tfunction createEnlarge(contId, chartObj){\n\t       \t\tvar cont = document.getElementById(contId);\n\t       \t\tvar icon = document.createElement(''i'');\n\t    \t   \t\ticon.className=\"showLightbox fa fa-search-plus color-gray\";\n\t           \t\ticon.style.marginTop = (cont.clientHeight - 24) + ''px'';\n\t           \t\ticon.onclick = function(){\n\t\t\t\t\t\tshowLightboxForElement(icon, chartObj);\n\t\t\t\t\t};\n       \t\t\tcont.insertBefore(icon,cont.firstChild);\t\n       \t}\n        </script>\n<link href=\"/css/default.css\" type=\"text/css\" rel=\"stylesheet\">\n<link href=\"/css/skin.css\" type=\"text/css\" rel=\"stylesheet\">\n<link href=\"/css/icons.css\" type=\"text/css\" rel=\"stylesheet\">\n<link href=\"/css/fa/font-awesome.css\" type=\"text/css\" rel=\"stylesheet\">\n</head>\n<body class=\"report_html billing\">\n<style>\n</style>\n<xmp xmlns:bf=\"http://www.backbase.com/2007/forms\" class=\"printLandscape\" type=\"application/backbase+xml\" backbase=\"true\">\n<xi:include href=\"/Backbase/skin.xml\"/>\n<div name=\"report_banner_logo\"></div>\n<div name=\"report_controls\">\n<div id=\"report_logo\"></div>\n<b:button>Print\n                <e:handler type=\"text/javascript\" event=\"click\">\n                    embPrint();\n                </e:handler>\n</b:button>\n</div>\n<div name=\"report_banner_title\">\n<h1>AWS Reclamation Report</h1>\n</div>\n<div name=\"report_banner_subtitle\">\n<ul class=\"report_para\">\n<table class=\"clear_border_report_table\">\n\n') \nadd-Content -Path $reportpath -Value (\"\n<tr>\n<td><label>Creation Date:</label></td><td>$CreationDate</td>\n</tr>\n<tr>\n<td><label>AWS Account:</label></td><td>$SanitzedAccount</td>\n</tr>\n<tr>\n<td><label>Account Name:</label></td><td>$AccountName</td>\n</tr>\n</table>\n</ul>\n</div>\n<div>\n<p></p>\n</div>\n<br>\n</br> \n<table id=\"\"table-1\"\">\n<tr>\n<td>\n\n<div id=\"\"table1Div\"\">\n<div class=\"\"tableData\"\">\n<table class=\"\"table_data\"\">\n<tr>\n<th>Savings Summary</th><th>Count</th><th>Yearly Cost (USD)</th>\n</tr>\n\") -Force -Confirm:$false\n#Add Summary Table Objects\n$SumObj | ForEach-Object {\nif($_.Type){[string]$sumtp = $_.Type}\n    Else{$sumtp =\"-\"}\nif($_.count){[int]$sumcount = $_.Count}\n    Else{$sumcount = \"-\"}\nif($_.ycost){[float]$sumcost = $_.ycost}\n    Else{$sumcost = \"-\"}   \n\nAdd-Content -Path $reportpath -Value (\"\n<tr>\n<td>$sumtp</td><td>$sumcount</td><td>$sumcost</td>\n</tr>\n\") -force -Confirm:$false\n}\n\nAdd-Content -Path $reportpath -Value (\"\n</table>\n</div>\n</div>\n\n<script type=\"\"text/javascript\"\">\n</script></td>\n</tr>\n</table>\n<table width=\"\"100%\"\" id=\"\"table-2\"\">\n<tr>\n<td>\n<p>\n<b>Item Summary</b>\n</p>\n<div class=\"\"chart_details\"\">\n<table class=\"\"report_table\"\">\n<tr>\n<th>Type</th><th class=\"\"rightAligned\"\">Region</th><th class=\"\"rightAligned\"\">Identifier</th><th class=\"\"rightAligned\"\">Storage GB</th>\n</tr>\n\") -force -Confirm:$false\n\n#Add Summary Table Objects\n$SortedArray = $TableArrray | Sort-object -Property Region ,Type\n$Sortedarray| ForEach-Object {\n    $linetp = $LineRegn = $lineid = $lineGB = $null\n    if($_.Type){[string]$linetp = $_.Type}\n    Else{$linetp =\"-\"}\nif($_.Region){[string]$LineRegn = $_.Region}\n    Else{$LineRegn =\"-\"}\nif($_.UNIdentifier){[string]$lineid = $_.UNIdentifier}\n    Else{$lineid =\"-\"}\nif($_.SizeGB){$lineGB = $_.SizeGB}\n    Else{$LineGB =\"-\"}\n    Write-Debug \"Object-$Linetp $LineRegn $lineid $lineGB\"\n    \nAdd-Content -Path $reportpath -Value (\"\n<tr>  \n<td>$linetp</td><td class=\"\"rightAligned\"\">$LineRegn</td><td class=\"\"rightAligned\"\">$lineid</td><td class=\"\"rightAligned\"\">$lineGB</td>\n</tr>\n\n\") -force -Confirm:$false\n}\n\nAdd-Content -Path $reportpath -Value (\"\n<tr>\n<td colspan=\"\"1448\"\"><span class=\"\"recordDesc\"\"></span></td>\n</tr>\n<tr>\n<td class=\"\"blackLine\"\" colspan=\"\"3458\"\"></td>\n</tr>\n\n</table>\n</div>\n</td>\n</tr>\n\n</table>\n<div id=\"\"report_bottom\"\"></div>\n</xmp>\n</body>\n</html>\n\") -force -Confirm:$false\n\n\nWrite-Output \"AWSRPath#$FileName\" \n",
        "script_arguments": "",
        "timeout": 1800,
        "executable": "powershell.exe",
        "capture_output": true
      }
    },
    {
      "name": "Parse Output for report URL",
      "type": "EMBEDDED_SCRIPT",
      "condition": "#{target.cloudAccount.type} -eq \"amazon_aws\"",
      "data": {
        "credentials": null,
        "failure_action": "FAIL_STEP",
        "script_contents": "$ReportName = \"#{steps[1].output}\"\n$CommanderAddress = \"#{system.address}\"\n$Report = $Reportname.Split('#')[1]\nWrite-Output \"https://$CommanderAddress/reports/$Report\" \n\n",
        "script_arguments": "",
        "timeout": 300,
        "executable": "powershell.exe",
        "capture_output": true
      }
    },
    {
      "name": "Send Email",
      "type": "EMAIL",
      "condition": "#{target.cloudAccount.type} -eq \"amazon_aws\"",
      "data": {
        "address_list": "yourmail@yourcompany.com",
        "email_body": "The AWS Report you requested is ready. \nReport Address: #{steps[2].output}\n",
        "email_subject": "AWS Waste Report Complete",
        "include_details": true
      }
    }
  ]
}